<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-08-05T19:44:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Generate a modern CSR with OpenSSL</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/08/generate-a-modern-csr-with-openssl.html"/>
    <id>http://blog.url.com/blog/2015/08/generate-a-modern-csr-with-openssl.html</id>
    <published>2015-08-05T19:44:00+00:00</published>
    <updated>2015-08-07T04:43:36+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;To get an SSL certificate, you need to first generate a CSR. However, some
early settings for the CSR can cripple your deployment before you even choose
any ciphers. The normal command, &lt;code&gt;openssl req&lt;/code&gt;, will use old and now insecure
defaults.&lt;/p&gt;

&lt;p&gt;Not that it&amp;rsquo;s particularly hard, you just need to pass in some parameters to the
command to opt into the newer crypto:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl req -nodes -new -newkey rsa:4096 -sha256 -keyout private.key -out cert.csr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The particular updates to the command are 2 part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The new certificate request will generate a 4096 bit RSA key. This is
currently more than the base 2048 that&amp;rsquo;s considered secure, but I have heard
rumors about 2048 becoming factorizable&amp;hellip; Better safe than sorry.&lt;/li&gt;
&lt;li&gt;Use SHA256 for the hash in the CSR.
&lt;a href="https://shaaaaaaaaaaaaa.com/"&gt;Shaaaaaaaaaaaaa&lt;/a&gt; has a good summary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For personal sites, not EVs, you can also pass another parameter to openssl to
avoid it asking questions. All you need for those sites is just the common name
of the certificate, or the domain name to be used for the site:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl req -subj '/CN=evaryont.me/'
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Nginx may not reload config</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/07/nginx-may-not-reload-config.html"/>
    <id>http://blog.url.com/blog/2015/07/nginx-may-not-reload-config.html</id>
    <published>2015-07-12T16:03:00+00:00</published>
    <updated>2015-08-07T04:44:28+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Have you tried turning it off and on again?" src="https://www.thinkgeek.com/images/products/additional/large/11C3_ITCROWD_TURNOFFON.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Per the &lt;a href="http://wiki.nginx.org/CommandLine"&gt;nginx documentation&lt;/a&gt;
(emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What happens is that when nginx receives the HUP signal, it tries to parse the
configuration file (the specified one, if present, otherwise the default), and
if successful, tries to apply a new configuration (i.e. re-open the log files
and listen sockets). If successful, nginx runs new worker processes and
signals graceful shutdown to old workers. Notified workers close listen
sockets but continue to serve current clients. After serving all clients old
workers shutdown. &lt;strong&gt;If nginx couldn&amp;rsquo;t successfully apply the new configuration,
it continues to work with an old configuration.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, if you have a properly set up nginx configuration and yet you are still
getting the default &amp;ldquo;Welcome to nginx!&amp;rdquo; page over and over, try restarting nginx
itself. I wished I&amp;rsquo;d have realized this aspect of nginx before spending hours
scratching my head.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>From Amazon, Intui-Shop and Recommendation Engines</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/04/from-amazon-intui-shop-and-recommendation-engines.html"/>
    <id>http://blog.url.com/blog/2015/04/from-amazon-intui-shop-and-recommendation-engines.html</id>
    <published>2015-04-03T20:14:00+00:00</published>
    <updated>2015-08-07T04:43:20+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;The benefits of “Intui-Shop” go beyond not having to think about anything ever
again. They include discovering, and buying, exciting new products that you
haven&amp;rsquo;t even heard of yet, and catching up on old Amazon Wish List items that
you haven&amp;rsquo;t thought about in years.&lt;/p&gt;

&lt;p&gt;Let’s put it this way: You know how, when you order something on Amazon, you
lose track of when it’s supposed to arrive? So that, when you find it at your
door, it feels like your birthday? Now every day can—and will—be like that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://www.newyorker.com/humor/daily-shouts/an-important-notice-from-amazon"&gt;A humour piece from the New Yorker&lt;/a&gt;.
I doubt we’ll actually see this – there are too many risqué and truly crap
products on Amazon to full automate it entirely, and real AI is too damn hard.
But the future of recommendation engines definitely can do down this path.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cox home network facts</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/03/cox-home-network-facts.html"/>
    <id>http://blog.url.com/blog/2015/03/cox-home-network-facts.html</id>
    <published>2015-03-02T23:29:00+00:00</published>
    <updated>2015-08-07T04:40:55+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Just called Tier 2 tech support for Cox looking to unblock some ports. Namely,
port 80, for web servers. Turns out that’s not going to happen.&lt;/p&gt;

&lt;p&gt;The following ports are blocked for inbound traffic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;80&lt;/li&gt;
&lt;li&gt;25&lt;/li&gt;
&lt;li&gt;135-139&lt;/li&gt;
&lt;li&gt;143&lt;/li&gt;
&lt;li&gt;445&lt;/li&gt;
&lt;li&gt;1433-1434&lt;/li&gt;
&lt;li&gt;1900&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(For a total of 13 ports that will never respond.)&lt;/p&gt;

&lt;p&gt;The tech support on call seemed to imply that outbound traffic on port 25 is
blocked as well.&lt;/p&gt;

&lt;p&gt;Also, static IPs for residental networks are never, ever going to happen.&lt;/p&gt;

&lt;p&gt;Unblocking those ports? Nope, never. No if, ands, or buts about it. This is
entirely due to malware using those ports to either open an outgoing RAT/C&amp;amp;C
connection, or breach the network via exploits on software commonly run on
those ports (looking at you, intrepid Microsoft Server user who doesn’t know
how to secure it).&lt;/p&gt;

&lt;p&gt;But notably, the default port for HTTPS (443) isn’t blocked, and I specifically
asked about it. Totally go for it, it’s fine. Of course, if you start hosting
malware and generally causing trouble for the neighboorhood, that’s no bueno
and is grounds for account termination. “No internet for you!” (The whole
neighboorhood can be affected because your bandwidth is shared up to the cable
node.)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What systemd actually brings to the table: Interfaces</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/02/what-systemd-actually-brings-to-the-table-interfaces.html"/>
    <id>http://blog.url.com/blog/2015/02/what-systemd-actually-brings-to-the-table-interfaces.html</id>
    <published>2015-02-14T23:13:00+00:00</published>
    <updated>2015-08-07T04:44:40+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One thing I’d like point out is that while systemd is coupling many of those
sort of things together into one cohesive package (but not one program, natch),
it’s not trying to be the primary thing for all of those. So you can rule out
hostname, httpd, dbus, LUKS, date, and iptables from that list. (It won’t be
the primary webserver, it just has one. It isn’t hosting the DBus daemon as
part of it, it just uses it extensively, etc.)&lt;/p&gt;

&lt;p&gt;The other aspect of some of the extraneous projects that systemd is introducing
(datetimed, hostnamed, etc) are just APIs and an implementation for something
that has badly needed one but nothing had arisen yet. Convention over
configuration is a powerful default, one that Linux has sorely lacked.&lt;/p&gt;

&lt;p&gt;And there is a lot of configuration the system needs to do during boot-up to
get a basic functioning system, regardless of purpose. You want your hard
drives mounted, in the correct locations. You want your network stack
initialized, at least basically. You want your firewall rules applied. You want
all of this done in the correct order, but parallelized when possible. Which
means you’d need a defined interface to interrogate the state of each of those.
And perhaps a defined interface for each of those to notify the init process.
(An alternative architecture can be developed, I’m sure.)&lt;/p&gt;

&lt;p&gt;All that being said, I think systemd would’ve been easier to swallow if
hostnamed, datetimed, etc were introduced earlier and used before pushing
systemd itself. However, I don’t think a lot of people would have used them
individually if they were. It’d be like looking at trying to replace a cron
implementation. A dedicated camp or two would use it, but the rest of the
community would ignore it. (Pick any example, I’m certain I could find examples
of alternatives coming but never reaching critical mind share. Even if they
would’ve improved the status quo in some way.)&lt;/p&gt;

&lt;p&gt;I see systemd as pushing many different changes that needed to happen at some
point all at once. Risky, noisy, and quite painful. Ripping the bandages off
all the hacks from the 80’s &amp;amp; 90’s at once.&lt;/p&gt;

&lt;p&gt;It could’ve been done better.&lt;/p&gt;

&lt;p&gt;(In response to &lt;a href="https://lobste.rs/s/ewi8gu/fed_up_with_systemd_and_linux_why_not_try_pc-bsd/comments/7x7p9b#c_7x7p9b"&gt;this comment on Lobste.rs&lt;/a&gt;)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Generating a webpage screenshot in ruby</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/10/generating-a-screenshot-in-ruby.html"/>
    <id>http://blog.url.com/blog/2014/10/generating-a-screenshot-in-ruby.html</id>
    <published>2014-10-16T00:17:00+00:00</published>
    <updated>2015-07-08T20:28:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As I have spent the last hour and a half figuring out, generating a screenshot
of a website in Ruby is harder than it seems.&lt;/p&gt;

&lt;p&gt;So first off, we&amp;rsquo;ll need a browser&amp;rsquo;s rendering engine. Preferably one that is
headless, so we&amp;rsquo;ll go with PhantomJS. Make sure it&amp;rsquo;s installed.&lt;/p&gt;

&lt;p&gt;Then, we need a way to control PhantomJS, and I&amp;rsquo;m a fan of Watir so we&amp;rsquo;ll use
that. To connect to PhantomJS, you also need the selenium webdriver gem. So your
gemfile would look like:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'watir'&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'watir-webdriver'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then let&amp;rsquo;s write the code to actually take the screenshot:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Watir&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:phantomjs&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://google.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt; &lt;span class="s1"&gt;'google.com.png'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you try to run it, the result isn&amp;rsquo;t what you&amp;rsquo;d expect from Google.
It has the old black navigation bar at the top. As it turns out, Google does UA
sniffing, so let&amp;rsquo;s pretend to be Firefox instead:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;capabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Capabilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;phantomjs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'phantomjs.page.settings.userAgent'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/33.0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Watir&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:phantomjs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:desired_capabilities&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;capabilities&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that should work for everything and every body now, right? Nope!&lt;/p&gt;

&lt;p&gt;As it also turns out, PhantomJS includes it&amp;rsquo;s own certificate store, and if it
doesn&amp;rsquo;t recognize a site&amp;rsquo;s SSL certificate, it&amp;rsquo;ll error out, returning a
transparent image as the screenshot. (Cause hey, &lt;code&gt;about:blank&lt;/code&gt; is actually
blank!) You can set the command line parameter &lt;code&gt;--ignore-ssl-errors=true&lt;/code&gt; to
fix that. You can pass CLI parameters in via a capability. So modifying the
previous code&amp;hellip;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;capabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Capabilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;phantomjs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'phantomjs.page.settings.userAgent'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/33.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                                   &lt;span class="s1"&gt;'phantomjs.cli.args'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'--ignore-ssl-errors=true'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now personally, I think the default resolution (400x300) of PhantomJS is a
little small. I personally like the screenshot to be a bit bigger, so let&amp;rsquo;s
expand it:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;dimensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;768&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dimensions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There you go! A side note, the dimensions just set the size of the viewport, the
website can of course scroll beyond that size. Taking a screenshot will capture
the entire page, not just what is visible in the viewport.&lt;/p&gt;

&lt;p&gt;The complete code:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'watir'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'watir-webdriver'&lt;/span&gt;

&lt;span class="n"&gt;capabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Capabilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;phantomjs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'phantomjs.page.settings.userAgent'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/33.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                                   &lt;span class="s1"&gt;'phantomjs.cli.args'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'--ignore-ssl-errors=true'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Watir&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:phantomjs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:desired_capabilities&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;capabilities&lt;/span&gt;

&lt;span class="n"&gt;dimensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;768&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dimensions&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://google.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt; &lt;span class="s1"&gt;'google.com.png'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to these other blogs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://blog.vbalazs.me/2014/08/my-adventures-with-tracking-down-a-database-leak.html&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/a/17687452&lt;/li&gt;
&lt;li&gt;http://yizeng.me/2013/08/10/set-user-agent-using-selenium-webdriver-c-and-ruby/#phantomjs&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
